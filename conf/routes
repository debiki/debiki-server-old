# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# In Global.scala, routing is intercepted, and editPost/createPage/etc
# are called, based on the query string (e.g. ?edit=... or ?create-page).

# API calls
# Would be nice to change to <path>?login-simple / ?logout / etcetera,
# so the actual page will be included in the request. Then one would know
# on which page did the user start/end the session. But for now:

# Rare compilation problem tips:
# If there's ever again any impossibly weird error like:
#   [error] /home/kajmagnus/me-dev/debiki/all/debiki-server/conf/routes:14:
#     too many arguments for method apply:
#     (name: String, constraint: String)play.core.DynamicPart in object DynamicPart
#   [error] GET /-/login/:provider  controllers.AppLogin.loginWith(provider, returnToUrl)
# Then, in project/Build.scala, add nonTransitive() to perhaps the play-plugins-mailer
# dependency ? see:
#   https://groups.google.com/forum/?fromgroups=#!topic/play-framework/cVqBvywCs4k

GET   /-/broken-page            controllers.Application.brokenPage

GET   /-/login/:provider        controllers.AppLogin.loginWith(provider, returnToUrl)
POST  /-/login                  controllers.AppLogin.loginWithPostData(returnToUrl = "")
POST  /-/logout                 controllers.AppLogin.logout

POST  /-/login-guest            controllers.AppLoginGuest.loginGuest
GET   /-/api/login-openid       controllers.AppLoginOpenId.loginGet
POST  /-/api/login-openid       controllers.AppLoginOpenId.loginPost
GET   /-/api/login-openid-clbk  controllers.AppLoginOpenId.loginCallback(returnToUrl)
GET   /-/api/logout             controllers.AppLogin.logout
POST  /-/api/logout             controllers.AppLogin.logout

POST  /-/search/site                        controllers.FullTextSearch.searchWholeSite()
GET   /-/search/site/for/:phrase            controllers.FullTextSearch.searchWholeSiteFor(phrase)
POST  /-/search/section/:pageId             controllers.FullTextSearch.searchSiteSection(pageId)
GET   /-/search/section/:pageId/for/:phrase controllers.FullTextSearch.searchSiteSectionFor(phrase, pageId)

# ---------------------------------------------------------------
# SecureSocial, test links (I'll integrate with OpenID/Guest login later)
# ---------------------------------------------------------------
# Map static resources from the /public folder to the /assets URL path
GET     /-/ss/assets/*file               controllers.Assets.at(path="/public/securesocial", file)

# Login page
GET     /-/ss/login                      securesocial.controllers.LoginPage.login
GET     /-/ss/logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling (only needed if you are using UsernamePasswordProvider)
GET     /-/ss/signup                     securesocial.controllers.Registration.startSignUp
POST    /-/ss/signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /-/ss/signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /-/ss/signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /-/ss/reset                      securesocial.controllers.Registration.startResetPassword
POST    /-/ss/reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /-/ss/reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /-/ss/reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /-/ss/password                   securesocial.controllers.PasswordChange.page
POST    /-/ss/password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /-/ss/authenticate/:provider     controllers.AppLoginSecureSocial.authenticate(provider)
POST    /-/ss/authenticate/:provider     controllers.AppLoginSecureSocial.authenticateByPost(provider)
GET     /-/ss/not-authorized             securesocial.controllers.ProviderController.notAuthorized
# ---------------------------------------------------------------
# ---------------------------------------------------------------

GET   /-/install/                   controllers.AppInstall.viewInstallationPage
POST  /-/install/create-first-site  controllers.AppInstall.createFirstSite
GET   /-/install/create-first-owner controllers.AppInstall.createFirstSiteOwner(password)

GET   /-/create-site/choose-type    controllers.CreateSiteController.showSiteTypeForm
POST  /-/create-site/choose-type    controllers.CreateSiteController.handleSiteTypeForm
GET   /-/create-site/choose-name    controllers.CreateSiteController.showWebsiteNameForm
POST  /-/create-site/choose-name    controllers.CreateSiteController.handleWebsiteNameForm
GET   /-/create-site/choose-owner   controllers.CreateSiteController.showWebsiteOwnerForm
GET   /-/create-site/create         controllers.CreateSiteController.tryCreateWebsite
GET   /-/create-site/welcome-owner  controllers.CreateSiteController.welcomeOwner

GET   /-/admin/                 controllers.Application.viewAdminPage

GET   /-/edit                   controllers.AppEdit.showEditFormAnyPage(pageId, pagePath, pageRole, postId)
POST  /-/edit                   controllers.AppEdit.edit
POST  /-/pin-at-position        controllers.Pin.pinAtPosition
POST  /-/wrap-forums-in-group   controllers.AppForum.wrapForumsInNewGroup
#POST /-/move-pages             controllers.AppMoveRenamePage.movePages
POST  /-/move-rename-page       controllers.AppMoveRenamePage.moveRenamePage
POST  /-/approve                controllers.AppReview.approve
POST  /-/reject                 controllers.AppReview.reject
POST  /-/collapse-post          controllers.AppSimple.collapsePost
POST  /-/collapse-tree          controllers.AppSimple.collapseTree
POST  /-/close-tree             controllers.AppSimple.closeTree
#POST  /-/reopen-tree            controllers.AppSimple.reopenTree
POST  /-/load-trees             controllers.PagePartsLoader.loadTrees
POST  /-/load-posts             controllers.PagePartsLoader.loadPosts
POST  /-/load-replies           controllers.PagePartsLoader.loadReplies
POST  /-/load-threads-and-trees controllers.PagePartsLoader.loadThreadsAndTrees
GET   /-/list-pages             controllers.AppList.listPages
GET   /-/list-users             controllers.AppList.listUsers
POST  /-/change-page-meta       controllers.AppChangePageMeta.changeMeta

GET   /-/debug/testAutoApprove  controllers.Debug.testAutoApprove(ipAddress, identityId)

GET   /-/site/*file             controllers.SiteAssetBundles.at(file)

# Don't change the URL on the next line. The /-/assets/<version-number>/ is
# updated by the deployment script (asset fingerprinting).
GET   /-/assets/39/*file         controllers.Assets.at(path = "/public/res", file)
GET   /robots.txt               controllers.Assets.at(path = "/public", file = "robots.txt")
GET   /-/*file                  controllers.Assets.at(path = "/public", file)
GET   /favicon.ico              controllers.Assets.at(path = "/public/site/img", file = "favicon-test-2.ico")
